# -*- coding: utf-8 -*-
# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright (c) 2010-2011, GEM Foundation.
#
# OpenQuake is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License version 3
# only, as published by the Free Software Foundation.
#
# OpenQuake is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License version 3 for more details
# (a copy is included in the LICENSE file that accompanied this code).
#
# You should have received a copy of the GNU Lesser General Public License
# version 3 along with OpenQuake.  If not, see
# <http://www.gnu.org/licenses/lgpl-3.0.txt> for a copy of the LGPLv3 License.


import sys
import datetime

from openquake import flags
from openquake.utils import db
from openquake.utils.db import loader as db_loader

FLAGS = flags.FLAGS

flags.DEFINE_string('db_name', 'openquake', 'Name of database to connect to')
flags.DEFINE_string('host', 'localhost', 'Host name/IP of the database server')
flags.DEFINE_string('user', None, 'DB user to connect as')
flags.DEFINE_string('password', '', 'Password for the specified DB user')
flags.DEFINE_string('source_model', None,
    'Path to the source model to load into the DB')


if __name__ == "__main__":
    # set flags from the command line args
    FLAGS(sys.argv)

    if not all([FLAGS.user, FLAGS.source_model]):
        error_msg = """You must specify a db user and a path to a source\
 model.

For example:
    $ python bin/db_load_src_model --user=some_user \
--source_model=path/to/source.xml"""
        print error_msg
        print FLAGS.user
        sys.exit(0)

    else:
        engine = db.create_engine(
            FLAGS.db_name, FLAGS.user, password=FLAGS.password,
            host=FLAGS.host)

        src_loader = db_loader.SourceModelLoader(FLAGS.source_model, engine)

        started_at = datetime.datetime.now()

        results = src_loader.serialize()

        elapsed_time = (datetime.datetime.now() - started_at)
        print ">> Time spent %ss, %sms" % (
            str(elapsed_time.seconds), str(elapsed_time.microseconds / 1000))

        src_loader.close()

        print "Total sources inserted: %s" % len(results)
        print "Results: %s" % results
