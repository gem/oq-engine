#!/bin/bash

help() {
cat <<HSD
`basename $0` initialises the given database with the OpenQuake schema.
Also, table space paths are created as needed.

The command line arguments are as follows:

    --schema-path=path  Absolute path to directory with the schema files.
    --db-name=name      The name of the database to set up.
HSD
exit 0
}

if [ $# -eq 0 ]; then
    help
fi

tspace_path='/var/lib/postgresql/8.4/main/ts'
tspace_list="admin pshai eqcat"

schema_path=""
db_name=""

for i in $*
do
    case $i in
    --schema-path=*)
        schema_path=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
        test \( -d "$schema_path" -a -r "$schema_path" \)
        if [ $? -ne 0 ]; then
            echo "!! Schema path $schema_path does not exist or is not readable."
            exit 1
        fi
        ;;
    --db-name=*)
        db_name=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
        ;;
    -h|--help)
        help
        ;;
    *)
        echo "!! Uknown option: " $i
        exit 2
        ;;
    esac
done

schema_file="$schema_path/openquake.sql"
if [ ! -r $schema_file ]; then
    echo "!! Could not find/read schema file: $schema_file"
    exit 3
fi

if [ -z "$db_name" ]; then
    echo "!! Please specify a database name."
    exit 4
fi

# Drop database and table spaces..
echo ".. Dropping database $db_name .."
psql -U postgres -c "DROP DATABASE IF EXISTS $db_name"
for tspace in $tspace_list; do
    full_ts_name="${tspace}_ts"
    echo ".. Dropping table space $full_ts_name .."
    psql -U postgres -c "DROP TABLESPACE IF EXISTS $full_ts_name"
done

echo -n ".. Current table spaces: "
echo `psql -c '\db' -U postgres | perl -lane 'if ($_ =~ /^\s\S+/) { print $F[0] }'`

for tspace in $tspace_list; do
    full_ts_name="${tspace}_ts"
    full_tspace_path="$tspace_path/$full_ts_name"
    sudo test -d "$full_tspace_path"
    if [ $? -ne 0 ]; then
        echo ".. Creating table space path $full_tspace_path .."
        sudo mkdir -p $full_tspace_path
        sudo chown -R postgres.postgres $full_tspace_path
    fi
    ts_found=`psql -c '\db' -U postgres | perl -lane 'if ($_ =~ /^\s\S+/) { print $F[0] }' | grep $full_ts_name | wc -l`
    if [ $ts_found -eq 0 ]; then
        psql -U postgres -c "CREATE TABLESPACE $full_ts_name LOCATION '$full_tspace_path'"
    fi
done

echo ".. Creating database $db_name .."
psql -U postgres -c "CREATE DATABASE $db_name"
createlang plpgsql $db_name -U postgres
echo ".. Loading postgis functions/data into $db_name .."
psql -d $db_name -U postgres -f /usr/share/postgresql/8.4/contrib/postgis-1.5/postgis.sql
psql -d $db_name -U postgres -f /usr/share/postgresql/8.4/contrib/postgis-1.5/spatial_ref_sys.sql
psql -d $db_name -U postgres -f /usr/share/postgresql/8.4/contrib/postgis_comments.sql

# Apply database function definitions if present.
functions_file="$schema_path/functions.sql"
if [ -r $functions_file ]; then
    echo ".. Running functions file: $functions_file .."
    psql -d $db_name -U postgres -f $functions_file
fi

echo ".. Running schema definition file: $schema_file .."
psql -d $db_name -U postgres -f $schema_file

# Load static data if present.
load_file="$schema_path/load.sql"
if [ -r $load_file ]; then
    echo ".. Loading static data from: $load_file .."
    psql -d $db_name -U postgres -f $load_file
fi

# Apply database schema/table comments if present.
comments_file="$schema_path/comments.sql"
if [ -r $comments_file ]; then
    echo ".. Running comments file: $comments_file .."
    psql -d $db_name -U postgres -f $comments_file
fi
