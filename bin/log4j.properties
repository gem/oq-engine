
# ------------------------------------------------------------------------
#
# Control of the logging messages
# Log4J Logging Configuration
#
# ------------------------------------------------------------------------


# ------------------------------------------------------------------------
#
# 1. Section
# Control of the logging messages - The concept of logging levels
#
# ------------------------------------------------------------------------

#
# The logging level and file appender. Pick one level by uncommenting a line.
#
# log4j.rootLogger = TRACE, a1
# log4j.rootLogger = DEBUG, a1
log4j.rootLogger = INFO, a1
# log4j.rootLogger = WARN, a1
# log4j.rootLogger = ERROR, a1
# log4j.rootLogger = FATAL, a1

#
# Uncomment corresponding lines,
# if you want multiple appenders (a1=file, stdout=console, R=rolling file).
#
log4j.rootLogger = INFO, a1, stdout
# log4j.rootLogger = INFO, a1, stdout, R

#
# Advanced:
# Print only messages of chosen level or above in the designated package.
# You can customize the level for the package or even class you are interested in.
#
log4j.logger.org.opensha.gem.GEM1.calc.gemLogicTreeProcessor=DEBUG
# log4j.logger.org.opensha.gem.GEM1.calc.gemLogicTreeProcessor=INFO
# log4j.logger.org.opensha.gem.GEM1.calc.gemLogicTreeProcessor=WARN

#
# You can set the logging level in the logger and in the appender as well
# as it is done here: Only logging messages with level >= ERROR are send to conslole.
#
log4j.appender.stdout.threshold=error

# ------------------------------------------------------------------------
#
# 2. Section
# Destination of the logging messages - The concept of appenders
#
# ------------------------------------------------------------------------

#
# E.g. set a1 = openquake.log (this is done below).
#
log4j.appender.a1 = org.apache.log4j.FileAppender

#
# Uncomment if you want (also) the appender console
#
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout

#
# Uncomment if you want (also) the appender rolling file
# You can limit the log file's size:
# After reaching the specified size, the current log file
# is renamed and a new log is started.
#
# log4j.appender.R=org.apache.log4j.RollingFileAppender
# log4j.appender.R.File=example.log
# log4j.appender.R.MaxFileSize=10MB

#
# This determines the directory the log is saved to.
# (Pick a location and uncomment the corresponding line.
# Some values may point to the same location,
# e.g. "./logs/openquake.log" may be the same as "${user.home}/logs/openquake.log"
#
# log4j.appender.a1.file = ${user.dir}/logs/openquake.log
log4j.appender.a1.file = ./logs/openquake.log
# log4j.appender.a1.file = ${user.home}/logs/openquake.log
# log4j.appender.a1.file = ${java.io.tmpdir}/logs/openquake.log
# log4j.appender.a1.file = ${java.class.path}/logs/openquake.log
# log4j.appender.a1.file = ${java.home}/logs/openquake.log

#
# Pattern to output the caller's file name and line number.
#
log4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%F:%L) - %m%n

# ------------------------------------------------------------------------
#
# 3. Section
# Format of the logging messages - The concept of the layout
#
# ------------------------------------------------------------------------

#
# Format of the logging message in the specified appender
#
log4j.appender.a1.layout = org.apache.log4j.PatternLayout
log4j.appender.a1.layout.conversionPattern = %d [%t] %-5p %c - %m%n

#
# Pattern to output the caller's file name and line number to console
#
log4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%F:%L) - %m%n
