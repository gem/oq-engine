The performance of the hazard models in the GEM mosaic is usually dominated
by point sources.

For this reason the engine provides various of ways of improving the
performance of point sources at the cost of a minor loss in precision.

We also provide a test calculation (downloadable from
https://downloads.openquake.org/jobs/performance.zip) which is useful
for checking the performance of a server and the performance and
precision of the point source approximations. The source model inside
performance.zip contains a large multipoint source producing nearly
one million ruptures while the site model contains over 100,000 sites,
so the calculation is representative of a realistic continental scale
model, even if small.

Without approximations a new MacBook with the M1 processor can run
performance.zip in half an hour, beating a modern Xeon with 18x2 cores
by a shallow margin; on older machines performance.zip can take
several hours to run.

On my old 10 cores Xeon (vintage 2016) performance.zip runs in 1h12m:

$ oq run https://downloads.openquake.org/jobs/performance.zip
$ oq show performance
| calc_74, maxmem=12.8 GB    | time_sec | memory_mb | counts    |
|----------------------------+----------+-----------+-----------|
| total classical            | 42_699   | 278.7     | 21        |
| get_poes                   | 23_573   | 0.0       | 1_176_000 |
| computing mean_std         | 11_495   | 0.0       | 7_840     |
| composing pnes             | 5_812    | 0.0       | 1_176_000 |
| ClassicalCalculator.run    | 4_332    | 267.0     | 1         |

There are two parameters to control the performance, described in the
advanced manual:

1. the pointsource_distance parameter
2. the ps_grid_spacing parameter

The recommended way it to set only the ps_grid_spacing and then the
engine (starting from version 3.16) will automatically set
the pointsource_distance to a default of 40 km. This is normally a
good default in terms of speed vs precision. If one wants high precision
and care less about performance it is possible to set only the 
pointsource_distance, but then you will see a speedup only for models
with nontrivial nodal plane distributions or hypocenter depth distributions,
while when setting the ps_grid_spacing one will see a speedup in all situations.

In the case of performance.zip there is a nontrivial hypocenter distribution
with 5 values, so using the pointsource_distance approximation makes
sense:

$ oq run https://downloads.openquake.org/jobs/performance.zip -p pointsource_distance=40
$ oq show performance
| calc_76, maxmem=12.6 GB    | time_sec | memory_mb | counts  |
|----------------------------+----------+-----------+---------|
| total classical            | 9_616    | 318.7     | 21      |
| get_poes                   | 5_163    | 0.0       | 299_072 |
| computing mean_std         | 2_558    | 0.0       | 2_008   |
| composing pnes             | 1_307    | 0.0       | 299_072 |
| ClassicalCalculator.run    | 1_028    | 297.0     | 1       |

As you see we went down to 17m of runtime, a 4.2x speedup, not bad. We can then
compare the uniform hazard spectra to see if we get the same results:

$ oq compare uhs 74 76
| poe     | rms-diff  | max-diff | site   |
|---------+-----------+----------+--------|
| 0.00211 | 5.672E-05 | 0.00507  | 76_601 |

This is a very good comparison, in average the difference is 5E-5g and
the maximum difference is only 0.005g: in practice we are 4 times
faster without any significant loss in precision.

If this speedup is not enough, we can turn on the ps_grid_spacing
approximation and get

$ oq run https://downloads.openquake.org/jobs/performance.zip -p ps_grid_spacing=40
$ oq show performance
| calc_77, maxmem=12.7 GB    | time_sec | memory_mb | counts  |
|----------------------------+----------+-----------+---------|
| total classical            | 3_237    | 331.0     | 21      |
| get_poes                   | 1_757    | 0.0       | 122_617 |
| computing mean_std         | 876.7    | 0.0       | 819     |
| composing pnes             | 432.9    | 0.0       | 122_617 |
| ClassicalCalculator.run    | 368.2    | 292.5     | 1       |

$ oq compare uhs 74 77
| poe     | rms-diff  | max-diff | site   |
|---------+-----------+----------+--------|
| 0.00211 | 2.543E-04 | 0.00864  | 63_648 |

We are only a little less precision but a lot faster! From 72 minutes
to 6 minutes (12x) and 13x in total classical.

With engine-3.15 one had

$ oq run https://downloads.openquake.org/jobs/performance.zip -p pointsource_distance=40
$ oq show performance # bit slower than 3.16
| calc_78, maxmem=11.2 GB    | time_sec | memory_mb | counts    |
|----------------------------+----------+-----------+-----------|
| total classical            | 10_303   | 575.6     | 21        |
| get_poes                   | 5_239    | 0.0       | 1_834_549 |
| computing mean_std         | 2_847    | 0.0       | 70_582    |
| composing pnes             | 1_579    | 0.0       | 1_834_549 |
| ClassicalCalculator.run    | 1_095    | 293.9     | 1         |

$ oq compare uhs 74 78 # same precision as 3.16
| poe     | rms-diff  | max-diff | site   |
|---------+-----------+----------+--------|
| 0.00211 | 5.916E-05 | 0.00507  | 76_601 |

$ oq run https://downloads.openquake.org/jobs/performance.zip \
  -p ps_grid_spacing=40,pointsource_distance=40
$ oq show performance
| calc_80, maxmem=9.3 GB     | time_sec | memory_mb | counts  |
|----------------------------+----------+-----------+---------|
| total classical            | 4_412    | 355.1     | 21      |
| get_poes                   | 2_271    | 0.0       | 788_374 |
| computing mean_std         | 1_239    | 0.0       | 30_333  |
| composing pnes             | 671.6    | 0.0       | 788_374 |
| ClassicalCalculator.run    | 511.9    | 308.4     | 1       |

$ oq compare uhs 74 80  # same precision, slower
| poe     | rms-diff  | max-diff | site   |
|---------+-----------+----------+--------|
| 0.00211 | 2.407E-04 | 0.00864  | 63_648 |
