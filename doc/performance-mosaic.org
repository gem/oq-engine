Performance of various models in the global hazard mosaic, with
parameters pointsource_distance=75, ps_grid_spacing=50, using an azure
machine with 120 cores, 480 GB of RAM (kind HB120rs_v2).

* Engine 3.12

** EUR
"computing mean_std" is twice as fast and get_poes 25% faster.
More memory is needed (73G > 53G). "build_hazard" is 34x faster.
The slowest task is 336s. All is good.

#+BEGIN_EXAMPLE
| calc_93, maxmem=72.9 GB | time_sec | memory_mb | counts    |
|-------------------------+----------+-----------+-----------|
| total classical         | 84_582   | 573.3     | 376       |
| get_poes                | 35_969   | 0.0       | 9_557_638 |
| composing pnes          | 18_605   | 0.0       | 9_557_638 |
| computing mean_std      | 16_151   | 0.0       | 21_186    |
| make_contexts           | 9_307    | 0.0       | 9_582_215 |
| ClassicalCalculator.run | 1_436    | 5_366     | 1         |
| total build_hazard      | 755.2    | 23.8      | 240       |    
#+END_EXAMPLE
** SAM

The slow task issue is solved:

#+BEGIN_EXAMPLE
| operation-duration | counts | mean    | stddev | min     | max     |
|--------------------+--------+---------+--------+---------+---------|
| classical          | 393    | 499.8   | 38%    | 45.7    | 1_339   |

$ oq show task:classical:-1
taskno=383, eff_ruptures=30216, eff_sites=17155, duration=1339 s
sources="src_09_6pt25 src_09_6pt35 src_09_6pt45 src_09_6pt55 src_09_6pt65 src_09_6pt75"

#+END_EXAMPLE

The slowest task is till related to the grid sources.
A *lot* more memory is needed, 124G > 48G, but the calculation is faster.

#+BEGIN_EXAMPLE
| calc_41, maxmem=161.5 GB | time_sec | memory_mb | counts     |
|--------------------------+----------+-----------+------------|
| total classical          | 191_460  | 1_678     | 712        |
| get_poes                 | 93_330   | 0.0       | 579_583    |
| computing mean_std       | 64_845   | 0.0       | 579_583    |
| composing pnes           | 33_413   | 0.0       | 24_518_375 |
| make_contexts            | 18_836   | 0.0       | 24_544_086 |
| ClassicalCalculator.run  | 4_626    | 5_727     | 1          |
| total build_hazard       | 265.3    | 14.6      | 240        |

#+END_EXAMPLE
** CAN

"computing mean_std" is 20% faster, "total build_hazard" 17x faster,
"get_poes" 1.4x slower. The picture does not change much.

| calc_39, maxmem=104.8 GB | time_sec  | memory_mb | counts     |
|--------------------------+-----------+-----------+------------|
| total classical          | 1_573_906 | 738.1     | 619        |
| computing mean_std       | 1_289_348 | 0.0       | 39_861     |
| get_poes                 | 250_425   | 0.0       | 39_861     |
| composing pnes           | 92_460    | 0.0       | 36_736_209 |
| ClassicalCalculator.run  | 15_059    | 2_807     | 1          |
| make_contexts            | 14_869    | 0.0       | 36_739_040 |
| total build_hazard       | 7_506     | 60.7      | 240        |

** USA

The calculation is totally dominated by "computing mean_std"
and uses a lot of memory.

#+BEGIN_EXAMPLE
| calc_94, maxmem=216.5 GB | time_sec | memory_mb | counts     |
|--------------------------+----------+-----------+------------|
| total classical          | 227_284  | 2_728     | 421        |
| computing mean_std       | 159_085  | 0.0       | 10_154     |
| get_poes                 | 37_591   | 0.0       | 17_204_335 |
| make_contexts            | 15_979   | 0.0       | 17_205_985 |
| composing pnes           | 6_831    | 0.0       | 17_204_335 |
| ClassicalCalculator.run  | 2_672    | 2_737     | 1          |
| total build_hazard       | 240.6    | 10.4      | 238        |

| operation-duration | counts | mean    | stddev | min     | max     |
|--------------------+--------+---------+--------+---------+---------|
| classical          | 421    | 539.9   | 65%    | 5.82039 | 1_458   |  
#+END_EXAMPLE

The slowest task is 7x faster. "build_hazard" is 30x faster.

* Engine 3.11

** EUR

#+BEGIN_EXAMPLE
calc_26, maxmem=53.0 GB time_sec memory_mb counts   
======================= ======== ========= =========
total classical         115_897  464       628      
get_poes                45_780   0.0       8_774_945
computing mean_std      34_300   0.0       8_774_945
total build_hazard      25_592   23        240      
combine pmaps           23_719   0.0       99_146   
composing pnes          19_093   0.0       9_557_638
make_contexts           9_852    0.0       9_582_215
ClassicalCalculator.run 1_789    4_988     1        
#+END_EXAMPLE

The calculation is dominated by "get_poes", followed by "computing mean_std".
Also the computation of the statistics is significantly slow. The slowest
task is 264.9s.

** SAM

As Europe, but with terrible slow tasks due to heavy griddedSources:

#+BEGIN_EXAMPLE
$ oq show task_info 36
================== ====== ======= ====== ======= =======
operation-duration counts mean    stddev min     max    
classical          712    277     95%    16      2_854  

$ oq show task:classical:-1 36
taskno=706, eff_ruptures=69554, eff_sites=19361, duration=2832 s
sources="src_09_5pt85 src_09_5pt95 src_09_6pt05 src_09_6pt15 src_09_6pt25 src_09_6pt35 src_09_6pt45"

calc_36, maxmem=48.4 GB time_sec memory_mb counts    
======================= ======== ========= ==========
total classical         197_460  537       712       
get_poes                68_605   0.0       9_982_857 
computing mean_std      56_969   0.0       9_982_857 
composing pnes          34_811   0.0       24_518_375
make_contexts           19_669   0.0       24_544_086
total build_hazard      8_108    14        240       
combine pmaps           7_412    0.0       198_474   
ClassicalCalculator.run 4_769    6_193     1         
#+END_EXAMPLE

** USA

There is a terribly slow task taking 10_309 seconds (7x) and the calculation
is totally dominated by "get_poes".

#+BEGIN_EXAMPLE
======================== ======== ========= =========
calc_43, maxmem=134.6 GB time_sec memory_mb counts   
======================== ======== ========= =========
total classical          302_285  1_140     661      
get_poes                 192_912  0.0       1_429_999
total build_hazard       85_877   146       240      
combine pmaps            83_671   0.0       94_480   
composing pnes           62_824   0.0       227_943  
computing mean_std       23_797   0.0       1_429_999
make_contexts            17_422   0.0       229_559  
ClassicalCalculator.run  11_270   4_031     1        
#+END_EXAMPLE

** CAN

The calculation is totally dominated by "computing mean_std", thus suggesting
that the table-based GMPEs are poorly implemented. Computing the statistics
is nearly as slow as "get_poes".

#+BEGIN_EXAMPLE
calc_32, maxmem=62.6 GB time_sec  memory_mb counts    
======================= ========= ========= ==========
total classical         1_779_810 615       619       
computing mean_std      1_456_858 0.0       17_030_190
get_poes                181_862   0.0       17_030_190
total build_hazard      127_988   50        240       
combine pmaps           119_030   0.0       138_284   
composing pnes          99_463    0.0       36_736_209
ClassicalCalculator.run 18_098    2_850     1         
make_contexts           15_677    0.0       36_739_040
#+END_EXAMPLE

** AUS

It is the same as Europe, just bigger (27h38m)

#+BEGIN_EXAMPLE
calc_38, maxmem=109.7 GB time_sec   memory_mb counts
======================== ========== ========= =============
total classical          10_694_047 967       626
computing mean_std       4_292_618  0.0       1_057_902_046
get_poes                 4_038_882  0.0       1_057_902_046
composing pnes           1_425_823  0.0       560_796_102
make_contexts            549_942    0.0       561_011_707
ClassicalCalculator.run  99_506     15_887    1
total build_hazard       17_988     91        240
#+END_EXAMPLE
