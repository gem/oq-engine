--- a/openquake/engine.py
+++ b/openquake/engine.py
@@ -285,7 +285,7 @@
             self._extract_coords('REGION_VERTEX'))
 
         region.cell_size = self['REGION_GRID_SPACING']
-        return [site for site in region]
+        return region.grid.centers()
 
     def build_nrml_path(self, nrml_file):
         """Return the complete output path for the given nrml_file"""
--- a/openquake/shapes.py
+++ b/openquake/shapes.py
@@ -45,13 +45,11 @@
 
 
 class Region(object):
-    """A container of polygons, used for bounds checking"""
+    """A container of polygons, used for bounds checking."""
 
     def __init__(self, polygon):
-        self._grid = None
-        # TODO(JMC): Make this a multipolygon instead?
-        self.polygon = polygon
         self.cell_size = 0.1
+        self.polygon = polygon
 
     @classmethod
     def from_coordinates(cls, coordinates):
@@ -67,9 +65,9 @@
 
         # Constrain the precision for the coordinates:
         coordinates = [(round_float(pt[0]), round_float(pt[1]))
-                       for pt in coordinates]
-        polygon = geometry.Polygon(coordinates)
-        return cls(polygon)
+                for pt in coordinates]
+
+        return cls(geometry.Polygon(coordinates))
 
     @classmethod
     def from_simple(cls, top_left, bottom_right):
@@ -82,16 +80,14 @@
 
         :returns: :py:class:`openquake.shapes.Region` instance
         """
-        points = [top_left,
-                  (top_left[0], bottom_right[1]),
-                  bottom_right,
-                  (bottom_right[0], top_left[1])]
+        points = [top_left, (top_left[0], bottom_right[1]),
+                bottom_right, (bottom_right[0], top_left[1])]
 
         return cls.from_coordinates(points)
 
     @property
     def bounds(self):
-        """Returns a bounding box containing the whole region"""
+        """Return a bounding box containing the whole region."""
         return self.polygon.bounds
 
     @property
@@ -140,32 +136,17 @@
 
     @property
     def grid(self):
-        """Returns a proxy interface that maps lat/lon
+        """
+        Return a proxy interface that maps lat/lon
         to col/row based on a specific cellsize. Proxy is
-        also iterable."""
-        if not self._grid:
-            if not self.cell_size:
-                raise Exception(
-                    "Can't generate grid without cell_size being set")
-            self._grid = Grid(self, self.cell_size)
-        return self._grid
-
-    @property
-    def sites(self):
-        """ Returns a list of sites created from iterating over self """
-        sites = []
-
-        for site in self:
-            sites.append(site)
-
-        return sites
+        also iterable.
+        """
 
-    def __iter__(self):
         if not self.cell_size:
             raise Exception(
                 "Can't generate grid without cell_size being set")
-        for gridpoint in self.grid:
-            yield gridpoint.site
+
+        return Grid(self, self.cell_size)
 
 
 class RegionConstraint(Region):
@@ -218,93 +199,138 @@
         return self.__repr__()
 
 
-class BoundsException(Exception):
-    """Point is outside of region"""
-    pass
-
-
 class Grid(object):
-    """Grid is a proxy interface to Region, which translates
-    lat/lon to col/row"""
+    """
+    A proxy interface to Region.
+
+    It translates geographical points identified
+    by longitude and latitude to the corresponding grid points
+    according to the grid spacing given.
+    """
 
     def __init__(self, region, cell_size):
-        self.region = region
         self.cell_size = cell_size
-        self.lower_left_corner = self.region.lower_left_corner
+
+        # center of the lower left cell of this grid
+        self.llc = region.lower_left_corner
+
         self.columns = self._longitude_to_column(
-                    self.region.upper_right_corner.longitude) + 1
+                region.upper_right_corner.longitude) + 1
+
         self.rows = self._latitude_to_row(
-                    self.region.upper_right_corner.latitude) + 1
+                region.upper_right_corner.latitude) + 1
+
+        self.polygon = self._build_polygon()
+
+    def _build_polygon(self):
+        """
+        Create the polygon underlying this grid.
+        """
+
+        # since we are always considering the center of the
+        # cells, we must include half of the cell size
+        # to the borders
+        half_cell_size = self.cell_size / 2.0
+
+        min_lon = self.llc.longitude - half_cell_size
+        max_lon = (self.llc.longitude + (self.columns * self.cell_size)
+                + half_cell_size)
+
+        min_lat = self.llc.latitude - half_cell_size
+        max_lat = (self.llc.latitude + (self.rows * self.cell_size)
+                + half_cell_size)
+
+        coords = [(min_lon, max_lat), (max_lon, max_lat),
+                  (max_lon, min_lat), (min_lon, min_lat)]
+
+        return geometry.Polygon([(round_float(pt[0]),
+                round_float(pt[1])) for pt in coords])
+
+    def site_inside(self, site):
+        """
+        Confirm that the point is within the polygon
+        underlying the gridded region.
+        """
 
-    def check_site(self, site):
-        """Confirm that the site is contained by the region"""
-        check = False
-
-        try:
-            check = self.check_point(site.point)
-        except BoundsException:
-            LOGGER.debug("Site %s %s isn't on region" %
-                         (site.longitude, site.latitude))
-
-        return check
-
-    def check_point(self, point):
-        """ Confirm that the point is within the polygon
-        underlying the gridded region"""
-        if (self.region.polygon.contains(point)):
+        if self.polygon.contains(site.point):
             return True
-        if self.region.polygon.touches(point):
+
+        if self.polygon.touches(site.point):
             return True
-        raise BoundsException("Point is not on the Grid")
 
-    def check_gridpoint(self, gridpoint):
-        """Confirm that the point is contained by the region"""
-        point = Point(round_float(self._column_to_longitude(gridpoint.column)),
-                      round_float(self._row_to_latitude(gridpoint.row)))
-        return self.check_point(point)
+        return False
 
     def _latitude_to_row(self, latitude):
-        """Calculate row from latitude value"""
-        latitude_offset = math.fabs(latitude - self.lower_left_corner.latitude)
+        """
+        Return the corresponding grid row for the given
+        latitude, according to grid spacing.
+        """
+
+        latitude_offset = math.fabs(
+            latitude - self.llc.latitude)
+
         return int(round(latitude_offset / self.cell_size))
 
     def _row_to_latitude(self, row):
-        """Determine latitude from given grid row"""
-        return self.lower_left_corner.latitude + ((row) * self.cell_size)
+        """
+        Return the corresponding latitude for the given
+        grid row, according to grid spacing.
+        """
+
+        return self.llc.latitude + (row * self.cell_size)
 
     def _longitude_to_column(self, longitude):
-        """Calculate column from longitude value"""
-        longitude_offset = longitude - self.lower_left_corner.longitude
+        """
+        Return the corresponding grid column for the given
+        longitude, according to grid spacing.
+        """
+
+        longitude_offset = longitude - self.llc.longitude
         return int(round(longitude_offset / self.cell_size))
 
     def _column_to_longitude(self, column):
-        """Determine longitude from given grid column"""
-        return self.lower_left_corner.longitude + ((column) * self.cell_size)
+        """
+        Return the corresponding longitude for the given
+        grid column, according to grid spacing.
+        """
+
+        return self.llc.longitude + (column * self.cell_size)
+
+    def site_at(self, point):
+        """
+        Return the site corresponding to the center of the
+        cell identified by the given grid point.
+        """
+
+        return Site(self._column_to_longitude(point.column),
+                self._row_to_latitude(point.row))
 
     def point_at(self, site):
-        """Translates a site into a matrix bidimensional point."""
-        self.check_site(site)
+        """
+        Return the grid point where the given site falls in.
+        """
+
+        if not self.site_inside(site):
+            raise ValueError("Site <%s> is outside region." % site)
+
         row = self._latitude_to_row(site.latitude)
         column = self._longitude_to_column(site.longitude)
-        return GridPoint(self, column, row)
 
-    def site_at(self, gridpoint):
-        """Construct a site at the given grid point"""
-        return Site(self._column_to_longitude(gridpoint.column),
-                             self._row_to_latitude(gridpoint.row))
+        return GridPoint(self, column, row)
 
     def __iter__(self):
         for row in range(0, self.rows):
             for col in range(0, self.columns):
-                try:
-                    point = GridPoint(self, col, row)
-                    self.check_gridpoint(point)
-                    yield point
-                except BoundsException:
-                    LOGGER.debug(
-                            "Point (col %s row %s) at %s %s isn't on grid"
-                            % (col, row, point.site.longitude,
-                                point.site.latitude))
+                point = GridPoint(self, col, row)
+                yield point
+
+    def centers(self):
+        """
+        Return the set of sites defining the center of
+        the cells contained in this grid.
+        """
+
+        return [point.site for point in self]
 
 
 def c_mul(val_a, val_b):
