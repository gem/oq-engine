--- a/openquake/db/models.py
+++ b/openquake/db/models.py
@@ -958,6 +958,8 @@
         help_text="In the absence of an average population datum "
         "for exposure the user may want to specify that a day/night/transit "
         "population value should be used instead.")
+    #: Workaround flag for https://bugs.launchpad.net/openquake/+bug/1027041
+    workaround_1027041 = djm.NullBooleanField(null=True, default=False)
 
     class Meta:
         db_table = 'uiapi\".\"oq_job_profile'
--- a/openquake/db/schema/comments.sql
+++ b/openquake/db/schema/comments.sql
@@ -426,6 +426,7 @@
 COMMENT ON COLUMN uiapi.oq_job_profile.region_grid_spacing IS 'Desired cell size (in degrees), used when splitting up the region of interest. This effectively defines the resolution of the job. (Smaller grid spacing means more sites and thus more calculations.)';
 COMMENT ON COLUMN uiapi.oq_job_profile.region IS 'Region of interest for the calculation (Polygon)';
 COMMENT ON COLUMN uiapi.oq_job_profile.sites IS 'Sites of interest for the calculation (MultiPoint)';
+COMMENT ON COLUMN uiapi.oq_job_profile.workaround_1027041 IS 'Workaround flag for https://bugs.launchpad.net/openquake/+bug/1027041';
 
 
 COMMENT ON TABLE uiapi.output IS 'A single OpenQuake calculation engine output. The data may reside in a file or in the database.';
--- a/openquake/db/schema/openquake.sql
+++ b/openquake/db/schema/openquake.sql
@@ -1130,6 +1130,9 @@
     default_pop_cat VARCHAR CONSTRAINT default_pop_cat_value
         CHECK(default_pop_cat IS NULL OR
               default_pop_cat IN ('day', 'night', 'in_transit')),
+    -- Workaround flag for https://bugs.launchpad.net/openquake/+bug/1027041
+    workaround_1027041 BOOLEAN DEFAULT FALSE,
+
     -- timestamp
     last_update timestamp without time zone
         DEFAULT timezone('UTC'::text, now()) NOT NULL
--- a/openquake/engine.py
+++ b/openquake/engine.py
@@ -289,7 +289,11 @@
             self._extract_coords('REGION_VERTEX'))
 
         region.cell_size = self['REGION_GRID_SPACING']
-        return region.grid.centers()
+        if self.oq_job_profile.workaround_1027041 is not None:
+            workaround = self.oq_job_profile.workaround_1027041
+            return region.grid.centers(workaround_1027041=workaround)
+        else:
+            return region.grid.centers()
 
     def build_nrml_path(self, nrml_file):
         """Return the complete output path for the given nrml_file"""
--- a/openquake/job/params.py
+++ b/openquake/job/params.py
@@ -410,3 +410,4 @@
              modes=('classical', 'event_based', 'disaggregation', 'uhs',
                     'classical_bcr', 'event_based_bcr'),
              to_job=float)
+define_param('WORKAROUND_1027041', 'workaround_1027041', to_job=str2bool)
--- a/openquake/shapes.py
+++ b/openquake/shapes.py
@@ -45,13 +45,13 @@
 class Region(object):
     """A container of polygons, used for bounds checking."""
 
-    def __init__(self, polygon):
+    def __init__(self, polygon, cell_size=0.1):
         self._grid = None
-        self.cell_size = 0.1
+        self.cell_size = cell_size
         self.polygon = polygon
 
     @classmethod
-    def from_coordinates(cls, coordinates):
+    def from_coordinates(cls, coordinates, cell_size=0.1):
         """
         Build a region from a list of polygon coordinates.
 
@@ -66,7 +66,7 @@
         coordinates = [(round_float(pt[0]), round_float(pt[1]))
                 for pt in coordinates]
 
-        return cls(geometry.Polygon(coordinates))
+        return cls(geometry.Polygon(coordinates), cell_size=cell_size)
 
     @classmethod
     def from_simple(cls, top_left, bottom_right):
@@ -212,6 +212,7 @@
 
     def __init__(self, region, cell_size):
         self.cell_size = cell_size
+        self.region = region
 
         # center of the lower left cell of this grid
         self.llc = region.lower_left_corner
@@ -326,13 +327,18 @@
                 point = GridPoint(self, col, row)
                 yield point
 
-    def centers(self):
+    def centers(self, workaround_1027041=False):
         """
         Return the set of sites defining the center of
         the cells contained in this grid.
+        :param bool workaround:
+            https://bugs.launchpad.net/openquake/+bug/1027041
         """
-
-        return [point.site for point in self]
+        if workaround_1027041:
+            return [point.site for point in self
+                    if self.region.polygon.intersects(point.site.point)]
+        else:
+            return [point.site for point in self]
 
 
 class Site(nhlib_geo.Point):
