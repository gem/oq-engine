# The Hazard Library
# Copyright (C) 2012-2021 GEM Foundation
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import unittest

import os
import numpy
from openquake.hazardlib.scalerel.stirling2021_simplified import InterfaceLowerEpistemic
from openquake.hazardlib.scalerel.stirling2021_simplified import InterfaceUpperEpistemic
from openquake.hazardlib.scalerel.stirling2021_simplified import InterfaceMeanEpistemic
from openquake.hazardlib.scalerel.stirling2021_simplified import CrustalLowerEpistemic
from openquake.hazardlib.scalerel.stirling2021_simplified import CrustalUpperEpistemic
from openquake.hazardlib.scalerel.stirling2021_simplified import CrustalMeanEpistemic
from openquake.hazardlib.tests.scalerel.msr_test import BaseMSRTestCase

DATA_DIR = os.path.join(os.path.dirname(__file__), 'data', 'stirling2021simplified')


class Stirling2021InterfaceLowerTestCase(BaseMSRTestCase):
    '''
    Testing Stirling et al 2021 simplified relations for Interface at lower epistemic bound
    
    '''

    MSR_CLASS = InterfaceLowerEpistemic

    def test_median_area(self):
        """
        Tests against data generated by MATLAB code
        """
        # digitized data
        fname = os.path.join(DATA_DIR, 'interface_lower.csv')
        data = numpy.loadtxt(fname, delimiter=',')
        msr = InterfaceLowerEpistemic()
        computed = msr.get_median_area(data[:, 0], 90.)
        numpy.testing.assert_allclose(computed, 10**data[:, 1], rtol=10)

    def test_median_magnitude(self):
        """
        Tests against data generated by MATLAB code
        """
          # digitized data
        fname = os.path.join(DATA_DIR, 'interface_lower.csv')
        data = numpy.loadtxt(fname, delimiter=',')
        msr = InterfaceLowerEpistemic()
        computed = msr.get_median_mag(10**data[:, 1], 90.)
        numpy.testing.assert_allclose(computed, data[:, 0], rtol=2)


class Stirling2021InterfaceUpperTestCase(BaseMSRTestCase):
    '''
    Testing Stirling et al 2021 simplified relations for Interface at upper epistemic bound

    '''

    MSR_CLASS = InterfaceUpperEpistemic

    def test_median_area(self):
        """
        Tests against data generated by MATLAB code
        """
        # digitized data
        fname = os.path.join(DATA_DIR, 'interface_upper.csv')
        data = numpy.loadtxt(fname, delimiter=',')
        msr = InterfaceUpperEpistemic()
        computed = msr.get_median_area(data[:, 0], 90.)
        numpy.testing.assert_allclose(computed, 10 ** data[:, 1], rtol=10)

    def test_median_magnitude(self):
        """
        Tests against data generated by MATLAB code
        """
        # digitized data
        fname = os.path.join(DATA_DIR, 'interface_upper.csv')
        data = numpy.loadtxt(fname, delimiter=',')
        msr = InterfaceUpperEpistemic()
        computed = msr.get_median_mag(10 ** data[:, 1], 90.)
        numpy.testing.assert_allclose(computed, data[:, 0], rtol=2)


class Stirling2021InterfaceMeanTestCase(BaseMSRTestCase):
    '''
    Testing Stirling et al 2021 simplified relations for Interface events at mean epistemic bound

    '''

    MSR_CLASS = InterfaceMeanEpistemic

    def test_median_area(self):
        """
        Tests against data generated by MATLAB code
        """
        # digitized data
        fname = os.path.join(DATA_DIR, 'interface_mean.csv')
        data = numpy.loadtxt(fname, delimiter=',')
        msr = InterfaceMeanEpistemic()
        computed = msr.get_median_area(data[:, 0], 90.)
        numpy.testing.assert_allclose(computed, 10 ** data[:, 1], rtol=10)

    def test_median_magnitude(self):
        """
        Tests against data generated by MATLAB code
        """
        # digitized data
        fname = os.path.join(DATA_DIR, 'interface_mean.csv')
        data = numpy.loadtxt(fname, delimiter=',')
        msr = InterfaceMeanEpistemic()
        computed = msr.get_median_mag(10 ** data[:, 1], 90.)
        numpy.testing.assert_allclose(computed, data[:, 0], rtol=2)


class Stirling2021CrustalLowerTestCase(BaseMSRTestCase):
    '''
    Testing Stirling et al 2021 simplified relations for Crustal events at lower epistemic bound

    '''

    MSR_CLASS = CrustalLowerEpistemic

    def test_median_area(self):
        """
        Tests against data generated by MATLAB code
        """
        # data
        fname_strikeslip = os.path.join(DATA_DIR, 'crustal_strikeslip_lower.csv')
        fname_reverse = os.path.join(DATA_DIR, 'crustal_reverse_lower.csv')
        fname_normal = os.path.join(DATA_DIR, 'crustal_normal_lower.csv')

        data_strikeslip = numpy.loadtxt(fname_strikeslip, delimiter=',')
        data_reverse = numpy.loadtxt(fname_reverse, delimiter=',')
        data_normal = numpy.loadtxt(fname_normal, delimiter=',')
        msr = CrustalLowerEpistemic()
        # strike-slip
        computed_strikeslip = msr.get_median_area(data_strikeslip[:, 0], 0.)
        numpy.testing.assert_allclose(computed_strikeslip, 10 ** data_strikeslip[:, 1], rtol=0.05)
        # reverse
        computed_reverse = msr.get_median_area(data_reverse[:, 0], 90.)
        numpy.testing.assert_allclose(computed_reverse, 10 ** data_reverse[:, 1], rtol=0.05)
        # normal
        computed_normal = msr.get_median_area(data_normal[:, 0], -90.)
        numpy.testing.assert_allclose(computed_normal, 10 ** data_normal[:, 1], rtol=0.05)

    def test_median_magnitude(self):
        """
        Tests against data generated by MATLAB code
        """
        # digitized data
        fname_strikeslip = os.path.join(DATA_DIR, 'crustal_strikeslip_lower.csv')
        fname_reverse = os.path.join(DATA_DIR, 'crustal_reverse_lower.csv')
        fname_normal = os.path.join(DATA_DIR, 'crustal_normal_lower.csv')

        data_strikeslip = numpy.loadtxt(fname_strikeslip, delimiter=',')
        data_reverse = numpy.loadtxt(fname_reverse, delimiter=',')
        data_normal = numpy.loadtxt(fname_normal, delimiter=',')
        msr = CrustalLowerEpistemic()

        # strike-slip
        computed_strikeslip = msr.get_median_mag(10**data_strikeslip[:, 1], 0.)
        numpy.testing.assert_allclose(computed_strikeslip, data_strikeslip[:, 0], rtol=0.05)
        # reverse
        computed_reverse = msr.get_median_mag(10 ** data_reverse[:, 1], 90.)
        numpy.testing.assert_allclose(computed_reverse, data_reverse[:, 0], rtol=0.05)
        # normal
        computed_normal = msr.get_median_mag(10 ** data_normal[:, 1], -90.)
        numpy.testing.assert_allclose(computed_normal, data_normal[:, 0], rtol=0.05)



class Stirling2021CrustalUpperTestCase(BaseMSRTestCase):
    '''
    Testing Stirling et al 2021 simplified relations for Crustal events at lower epistemic bound

    '''

    MSR_CLASS = CrustalUpperEpistemic

    def test_median_area(self):
        """
        Tests against data generated by MATLAB code
        """
        # data
        fname_strikeslip = os.path.join(DATA_DIR, 'crustal_strikeslip_upper.csv')
        fname_reverse = os.path.join(DATA_DIR, 'crustal_reverse_upper.csv')
        fname_normal = os.path.join(DATA_DIR, 'crustal_normal_upper.csv')

        data_strikeslip = numpy.loadtxt(fname_strikeslip, delimiter=',')
        data_reverse = numpy.loadtxt(fname_reverse, delimiter=',')
        data_normal = numpy.loadtxt(fname_normal, delimiter=',')
        msr = CrustalUpperEpistemic()
        # strike-slip
        computed_strikeslip = msr.get_median_area(data_strikeslip[:, 0], 0.)
        numpy.testing.assert_allclose(computed_strikeslip, 10 ** data_strikeslip[:, 1], rtol=0.05)
        # reverse
        computed_reverse = msr.get_median_area(data_reverse[:, 0], 90.)
        numpy.testing.assert_allclose(computed_reverse, 10 ** data_reverse[:, 1], rtol=0.05)
        # normal
        computed_normal = msr.get_median_area(data_normal[:, 0], -90.)
        numpy.testing.assert_allclose(computed_normal, 10 ** data_normal[:, 1], rtol=0.05)

    def test_median_magnitude(self):
        """
        Tests against data generated by MATLAB code
        """
        # digitized data
        fname_strikeslip = os.path.join(DATA_DIR, 'crustal_strikeslip_upper.csv')
        fname_reverse = os.path.join(DATA_DIR, 'crustal_reverse_upper.csv')
        fname_normal = os.path.join(DATA_DIR, 'crustal_normal_upper.csv')

        data_strikeslip = numpy.loadtxt(fname_strikeslip, delimiter=',')
        data_reverse = numpy.loadtxt(fname_reverse, delimiter=',')
        data_normal = numpy.loadtxt(fname_normal, delimiter=',')
        msr = CrustalUpperEpistemic()

        # strike-slip
        computed_strikeslip = msr.get_median_mag(10**data_strikeslip[:, 1], 0.)
        numpy.testing.assert_allclose(computed_strikeslip, data_strikeslip[:, 0], rtol=0.05)
        # reverse
        computed_reverse = msr.get_median_mag(10 ** data_reverse[:, 1], 90.)
        numpy.testing.assert_allclose(computed_reverse, data_reverse[:, 0], rtol=0.05)
        # normal
        computed_normal = msr.get_median_mag(10 ** data_normal[:, 1], -90.)
        numpy.testing.assert_allclose(computed_normal, data_normal[:, 0], rtol=0.05)


class Stirling2021CrustalMeanTestCase(BaseMSRTestCase):
    '''
    Testing Stirling et al 2021 simplified relations for Crustal events at lower epistemic bound

    '''

    MSR_CLASS = CrustalMeanEpistemic

    def test_median_area(self):
        """
        Tests against data generated by MATLAB code
        """
        # data
        fname_strikeslip = os.path.join(DATA_DIR, 'crustal_strikeslip_mean.csv')
        fname_reverse = os.path.join(DATA_DIR, 'crustal_reverse_mean.csv')
        fname_normal = os.path.join(DATA_DIR, 'crustal_normal_mean.csv')

        data_strikeslip = numpy.loadtxt(fname_strikeslip, delimiter=',')
        data_reverse = numpy.loadtxt(fname_reverse, delimiter=',')
        data_normal = numpy.loadtxt(fname_normal, delimiter=',')
        msr = CrustalMeanEpistemic()
        # strike-slip
        computed_strikeslip = msr.get_median_area(data_strikeslip[:, 0], 0.)
        numpy.testing.assert_allclose(computed_strikeslip, 10 ** data_strikeslip[:, 1], rtol=0.05)
        # reverse
        computed_reverse = msr.get_median_area(data_reverse[:, 0], 90.)
        numpy.testing.assert_allclose(computed_reverse, 10 ** data_reverse[:, 1], rtol=0.05)
        # normal
        computed_normal = msr.get_median_area(data_normal[:, 0], -90.)
        numpy.testing.assert_allclose(computed_normal, 10 ** data_normal[:, 1], rtol=0.05)

    def test_median_magnitude(self):
        """
        Tests against data generated by MATLAB code
        """
        # digitized data
        fname_strikeslip = os.path.join(DATA_DIR, 'crustal_strikeslip_mean.csv')
        fname_reverse = os.path.join(DATA_DIR, 'crustal_reverse_mean.csv')
        fname_normal = os.path.join(DATA_DIR, 'crustal_normal_mean.csv')

        data_strikeslip = numpy.loadtxt(fname_strikeslip, delimiter=',')
        data_reverse = numpy.loadtxt(fname_reverse, delimiter=',')
        data_normal = numpy.loadtxt(fname_normal, delimiter=',')
        msr = CrustalMeanEpistemic()

        # strike-slip
        computed_strikeslip = msr.get_median_mag(10**data_strikeslip[:, 1], 0.)
        numpy.testing.assert_allclose(computed_strikeslip, data_strikeslip[:, 0], rtol=0.05)
        # reverse
        computed_reverse = msr.get_median_mag(10 ** data_reverse[:, 1], 90.)
        numpy.testing.assert_allclose(computed_reverse, data_reverse[:, 0], rtol=0.05)
        # normal
        computed_normal = msr.get_median_mag(10 ** data_normal[:, 1], -90.)
        numpy.testing.assert_allclose(computed_normal, data_normal[:, 0], rtol=0.05)



if __name__ == '__main__':
    unittest.main()